<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>栈与线性结构</title>
      <link href="/2024/05/24/%E6%A0%88%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
      <url>/2024/05/24/%E6%A0%88%E4%B8%8E%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法分析笔记"><a href="#数据结构与算法分析笔记" class="headerlink" title="数据结构与算法分析笔记"></a>数据结构与算法分析笔记</h1><p>​       数据结构与算法分析的学习对于提高编程技能和解决复杂问题至关重要。在实际应用中，选择合适的数据结构和算法可以大大提高程序的运行效率和内存使用效率。</p><h2 id="线性结构与非线性结构"><a href="#线性结构与非线性结构" class="headerlink" title="线性结构与非线性结构"></a>线性结构与非线性结构</h2><p>​       线性结构分为两种不同的存储结构，分别是顺序存储结构与链式存储结构，顺序存储的线性表称为顺序表，顺序表内的存储元素是连续的，链式存储的线性表称为链表，其存储元素不一定是连续的，元素节点存放数据元素与相邻元素的地址信息。</p><p>​       一对一线性的存储结构称为线性存储结构（分为连续与不连续），比如数组，链表，队列等。例如(1,2,3,4)与(1,?,?,2,3,?,?,?,4)。</p><p>​       对于非线性结构，常见的有：二维数组，广义表，树结构，图结构等</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>​       基础概念微机原理与接口技术中已讲，故略。</p><p>​       栈是一个表，所以任何可以实现表的方法都可以用来实现栈，主要是链表实现与数组实现。</p><h4 id="1-链表实现栈"><a href="#1-链表实现栈" class="headerlink" title="1.链表实现栈"></a>1.链表实现栈</h4><p>​       单链表实现栈，通过在链表顶端插入一个元素来实现<strong>PUSH入栈</strong>，通过删除链表的顶端元素来实现<strong>POP出栈</strong>，使用链表方式实现的栈叫做动态栈，动态栈有链表的部分特性，元素与元素之间在物理存储上可以不连续，功能受限，只能在栈顶进行PUSH和POP，而不是在栈中或栈尾实现插入与删除。</p><h4 id="2-数组实现栈"><a href="#2-数组实现栈" class="headerlink" title="2.数组实现栈"></a>2.数组实现栈</h4><p>数组实现的栈又叫静态栈。</p><p>基础的代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStack</span> &#123;</span><br><span class="line">    <span class="comment">// 定义栈的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxStack;</span><br><span class="line">    <span class="comment">// 定义数组来模拟栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack;</span><br><span class="line">    <span class="comment">// 定义栈顶位置，默认情况如果没有数据，则定义为-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> maxStack)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.maxStack = maxStack;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">int</span>[maxStack];<span class="comment">// 进行栈的初始化。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否满栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.top == <span class="built_in">this</span>.maxStack - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实现Push方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;此栈已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        top++; <span class="comment">// 每次压入数据后要进行指针自增，Pop则相反</span></span><br><span class="line">        stack[top] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实现Pop方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;次栈为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 进行stack内容的全部查看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;stack.length;i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Stack[%d]=%d&quot;</span>,i,stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stack的实例1-回文数"><a href="#stack的实例1-回文数" class="headerlink" title="stack的实例1:回文数"></a>stack的实例1:回文数</h3><blockquote><p>使用stack数组来判断一个字符串是否是回文数，回文数比如:abcdcba</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        System.out.println(detecation(<span class="string">&quot;abcba&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">detecation</span><span class="params">(String val)</span>&#123;</span><br><span class="line">        <span class="type">ArrayStack</span> <span class="variable">arraystack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> val.length();</span><br><span class="line">        <span class="comment">// 把字符串逐个压入栈中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            arraystack.push(val.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出</span></span><br><span class="line">        <span class="comment">// 因为pop后stack的length会变，所以先固定住总的初始长度</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newVal</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newLength</span> <span class="operator">=</span> arraystack.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;newLength;i++)&#123;</span><br><span class="line">            <span class="comment">//是否为空栈</span></span><br><span class="line">            <span class="keyword">if</span>(!arraystack.isEmpty())&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">pop</span> <span class="operator">=</span> (<span class="type">char</span>)arraystack.pop();</span><br><span class="line">                newVal = newVal + pop;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(val.equals(newVal))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="stack的实例2：完成表达式的计算"><a href="#stack的实例2：完成表达式的计算" class="headerlink" title="stack的实例2：完成表达式的计算"></a>stack的实例2：完成表达式的计算</h3><blockquote><p>String val &#x3D; “4 + 3 + 2 + 1*5”的结果</p></blockquote><p>大致思路；循环遍历字符串中的每一个数字，并且按照元素的种类分别压入数字栈或符号栈，若符号栈为空，压入的符号则直接入栈，若不为空则先比较栈中符号的优先级别，如果优先级小于等于栈中的符号，则需要计算原来数字栈的数据，再压入数字栈，再把符号压入到符号栈中，如果优先级大于原来栈中符号，则符号直接入栈即可。</p><p>设计的原因：</p><ul><li><strong>保持顺序</strong>：通过使用两个栈，能够按照表达式中出现的顺序处理数字和操作符。</li><li><strong>处理优先级</strong>：通过比较优先级并决定是否计算，可以确保更高优先级的操作符在较低优先级的操作符之前被处理，保证计算的正确性。</li><li><strong>计算简化</strong>：这种方法使得每次计算都比较简单，只需要关注栈顶的两个数字和一个操作符，而不是整个表达式。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
