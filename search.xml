<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一个测试帖子</title>
      <link href="/2024/05/21/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%B8%96%E5%AD%90/"/>
      <url>/2024/05/21/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%B8%96%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一个测试帖子"><a href="#这是我的第一个测试帖子" class="headerlink" title="这是我的第一个测试帖子"></a>这是我的第一个测试帖子</h1><p>这是一个很简单的鸟与飞机的初步识别代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">data_path = <span class="string">&#x27;../data-unversioned/p1ch7/&#x27;</span></span><br><span class="line">cifar10 = datasets.CIFAR10(data_path,train=<span class="literal">True</span>,download=<span class="literal">True</span>)</span><br><span class="line">cifar10_val = datasets.CIFAR10(data_path,train=<span class="literal">False</span>,download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cifar10))</span><br><span class="line">img,label = cifar10[<span class="number">99</span>]</span><br><span class="line"></span><br><span class="line">to_tensor = transforms.ToTensor()</span><br><span class="line">img_t = to_tensor(img)</span><br><span class="line"><span class="built_in">print</span>(img_t.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建数据集</span></span><br><span class="line">label_map = &#123;<span class="number">0</span> : <span class="number">0</span>,<span class="number">2</span> : <span class="number">1</span>&#125;;</span><br><span class="line">class_names = [<span class="string">&#x27;airplane&#x27;</span>,<span class="string">&#x27;bird&#x27;</span>]</span><br><span class="line">tensor_cifar10 = datasets.CIFAR10(data_path,train=<span class="literal">True</span>,download=<span class="literal">False</span>,transform=transforms.ToTensor())</span><br><span class="line">cifar2 = [(img,label_map[label]) <span class="keyword">for</span> img,label <span class="keyword">in</span> cifar10 <span class="keyword">if</span> label <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">cifar2_val = [(img,label_map[label]) <span class="keyword">for</span> img,label <span class="keyword">in</span> cifar10_val <span class="keyword">if</span> label <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征有32x32x3=3072个特征，使用线性模型</span></span><br><span class="line">model = nn.Sequential(</span><br><span class="line">    nn.Linear(</span><br><span class="line">        <span class="number">3072</span>,</span><br><span class="line">        <span class="number">512</span></span><br><span class="line">    ),</span><br><span class="line">    nn.Tanh(),</span><br><span class="line">    nn.Linear(</span><br><span class="line">        <span class="number">512</span>,</span><br><span class="line">        <span class="number">2</span></span><br><span class="line">    ),</span><br><span class="line">    nn.LogSoftmax(dim=<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">loss = nn.NLLLoss()</span><br><span class="line"></span><br><span class="line">imgs = torch.stack([img_t <span class="keyword">for</span> img_t,_ <span class="keyword">in</span> tensor_cifar10],dim=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(imgs.view(<span class="number">3</span>,-<span class="number">1</span>).mean(dim=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(imgs.view(<span class="number">3</span>,-<span class="number">1</span>).std(dim=<span class="number">1</span>))</span><br><span class="line">transforms.Normalize((<span class="number">0.4915</span>,<span class="number">0.4823</span>,<span class="number">0.4468</span>),(<span class="number">0.2470</span>,<span class="number">0.2435</span>,<span class="number">0.2616</span>))</span><br><span class="line">transformed_cifar10 = datasets.CIFAR10(</span><br><span class="line">    data_path,train=<span class="literal">True</span>,download=<span class="literal">False</span>,</span><br><span class="line">    transform=transforms.Compose([</span><br><span class="line">     transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.4915</span>,<span class="number">0.4823</span>,<span class="number">0.4468</span>),(<span class="number">0.2470</span>,<span class="number">0.2435</span>,<span class="number">0.2616</span>))</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">img_t , _ = transformed_cifar10[<span class="number">99</span>]</span><br><span class="line">plt.imshow(img_t.permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-2</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(),lr=learning_rate)</span><br><span class="line">loss_fn = nn.NLLLoss()</span><br><span class="line">n_epochs = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(n_epochs):</span><br><span class="line">    <span class="keyword">for</span> img,label <span class="keyword">in</span> cifar2:</span><br><span class="line">        out = model(img.view(-<span class="number">1</span>).unsqueeze(<span class="number">0</span>))</span><br><span class="line">        loss = loss_fn(out,torch.tensor([label]))</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">    <span class="built_in">print</span>(epoch,<span class="built_in">float</span>(loss))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
